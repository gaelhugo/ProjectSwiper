export default class Playground {
  constructor() {
    console.log(
      "%c ✨ WELCOME TO ECAL JS PLAYGROUND ✨ ",
      "background: #000; color: #f0f; padding:10px;"
    );
    console.log(
      "%c Open your favourite editor (VSCode) and edit the main File (js/App.js) ",
      "background: #f0f; color: #000;padding:3px;"
    );
    this._forceDimension = false;
    this.canvas = document.createElement("canvas");
    this.canvas.width = this.width = window.innerWidth;
    this.canvas.height = this.height = window.innerHeight;
    this.ctx = this.canvas.getContext("2d");
    this._animator1234 = 0;
    this._hsl0 = 0;
    document.body.appendChild(this.canvas);
    window.addEventListener("resize", this.resize.bind(this));
  }
  resize() {
    this.canvas.width = this.width = this._forceDimension
      ? this.width
      : window.innerWidth;
    this.canvas.height = this.height = window.innerHeight
      ? this.height
      : window.innerHeight;
  }
  view(width, height) {
    this._forceDimension = true;
    this.width = width;
    this.height = height;
    this.resize();
  }

  save(content, fileName, contentType) {
    var a = document.createElement("a");
    var file = new Blob([content], { type: contentType });
    a.href = URL.createObjectURL(file);
    a.download = fileName;
    a.click();
  }

  map(x, inMin, inMax, outMin, outMax) {
    return ((x - inMin) * (outMax - outMin)) / (inMax - inMin) + outMin;
  }

  draw() {
    this.ctx.fillStyle = "rgba(0,0,0,0.1)";
    this.ctx.fillRect(0, 0, this.width, this.height);
    /** CIRCLE */
    this.ctx.beginPath();
    const x =
      (Math.cos((this._animator1234 * Math.PI) / 180) * this.width) / 4 +
      this.width / 2;
    const y =
      (Math.sin((this._animator1234 * Math.PI) / 180) * this.width) / 4 +
      this.height / 2;
    this.ctx.arc(x, y, 10, 0, Math.PI * 2, false);
    this.ctx.fillStyle = `hsl(${this._hsl0},100%,50%)`;
    this.ctx.fill();
    this.ctx.closePath();
    this._animator1234 += 2;
    this._hsl0++;
    if (this._hsl0 > 255) {
      this._hsl0 = 0;
    }
    requestAnimationFrame(this.draw.bind(this));
  }
}
